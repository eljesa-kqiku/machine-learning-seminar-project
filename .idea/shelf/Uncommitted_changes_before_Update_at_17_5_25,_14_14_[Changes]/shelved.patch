Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"4bd0118d-ee39-4807-8648-485f96be9aca\" name=\"Changes\" comment=\"Finished the outliers part\">\n      <change afterPath=\"$PROJECT_DIR$/code/autoencoder/parameter_tuning.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/code/autoencoder/autoencoder.py\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/main.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/main.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/main.synctex.gz\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/main.synctex.gz\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/main.toc\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/main.toc\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/report/sections/referenca.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/report/sections/referenca.tex\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;eljesa-kqiku&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/eljesa-kqiku/machine-learning-seminar-project.git&quot;,\n    &quot;accountId&quot;: &quot;90eff15c-bfee-46f4-84b8-0c3d1896b41b&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2x3bMoYuGpTdAwf0XIq9v0GE0o2\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;LaTeX.main (1).executor&quot;: &quot;Run&quot;,\n    &quot;LaTeX.main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/eljesakqiku/Documents/Fakulteti/sem2/ML/machine-learning-seminar-project/datasets&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/datasets\" />\n      <recent name=\"$PROJECT_DIR$/code\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"LaTeX.main\">\n    <configuration name=\"main (1)\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\n      <texify>\n        <compiler>PDFLATEX</compiler>\n        <compiler-path />\n        <sumatra-path />\n        <pdf-viewer>NONE</pdf-viewer>\n        <viewer-command />\n        <compiler-arguments />\n        <envs />\n        <expand-macros-in-environment-variables>false</expand-macros-in-environment-variables>\n        <before-run-command />\n        <main-file>$PROJECT_DIR$/report/main.tex</main-file>\n        <output-path>$PROJECT_DIR$/out</output-path>\n        <auxil-path>{projectDir}/auxil</auxil-path>\n        <compile-twice>false</compile-twice>\n        <output-format>PDF</output-format>\n        <latex-distribution>TEXLIVE</latex-distribution>\n        <has-been-run>false</has-been-run>\n        <bib-run-config>[]</bib-run-config>\n        <makeindex-run-config>[]</makeindex-run-config>\n      </texify>\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"main\" type=\"LATEX_RUN_CONFIGURATION\" factoryName=\"LaTeX configuration factory\" temporary=\"true\">\n      <texify>\n        <compiler>PDFLATEX</compiler>\n        <compiler-path />\n        <sumatra-path />\n        <pdf-viewer>NONE</pdf-viewer>\n        <viewer-command />\n        <compiler-arguments />\n        <envs />\n        <expand-macros-in-environment-variables>false</expand-macros-in-environment-variables>\n        <before-run-command />\n        <main-file>$PROJECT_DIR$/report/main.tex</main-file>\n        <output-path>$PROJECT_DIR$/out</output-path>\n        <auxil-path>{projectDir}/auxil</auxil-path>\n        <compile-twice>false</compile-twice>\n        <output-format>PDF</output-format>\n        <latex-distribution>TEXLIVE</latex-distribution>\n        <has-been-run>true</has-been-run>\n        <bib-run-config>[]</bib-run-config>\n        <makeindex-run-config>[]</makeindex-run-config>\n      </texify>\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"LaTeX.main\" />\n        <item itemvalue=\"LaTeX.main (1)\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-WS-243.25659.40\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"4bd0118d-ee39-4807-8648-485f96be9aca\" name=\"Changes\" comment=\"\" />\n      <created>1747169658649</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1747169658649</updated>\n      <workItem from=\"1747169659803\" duration=\"426000\" />\n      <workItem from=\"1747170091465\" duration=\"6340000\" />\n      <workItem from=\"1747207398988\" duration=\"1630000\" />\n      <workItem from=\"1747262054010\" duration=\"2477000\" />\n      <workItem from=\"1747381350563\" duration=\"30000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Handling outliers\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1747262083144</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1747262083144</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added gitignore with latex output files\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1747262994718</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1747262994718</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added gitignore with latex output files\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1747263011096</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1747263011096</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Added details about outliers in the report\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1747263035236</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1747263035236</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Finished the outliers part\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1747429913422</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1747429913422</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"6\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Handling outliers\" />\n    <MESSAGE value=\"Added gitignore with latex output files\" />\n    <MESSAGE value=\"Added details about outliers in the report\" />\n    <MESSAGE value=\"Finished the outliers part\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Finished the outliers part\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6789131d7e069713819ffe8c7e06f29ea6ac4bb0)
+++ b/.idea/workspace.xml	(date 1747483892239)
@@ -4,14 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4bd0118d-ee39-4807-8648-485f96be9aca" name="Changes" comment="Finished the outliers part">
-      <change afterPath="$PROJECT_DIR$/code/autoencoder/parameter_tuning.py" afterDir="false" />
+    <list default="true" id="4bd0118d-ee39-4807-8648-485f96be9aca" name="Changes" comment="Finding the best parameters for the Autoencoder">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/code/autoencoder/autoencoder.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/main.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/out/main.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/main.synctex.gz" beforeDir="false" afterPath="$PROJECT_DIR$/out/main.synctex.gz" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/main.toc" beforeDir="false" afterPath="$PROJECT_DIR$/out/main.toc" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/report/sections/referenca.tex" beforeDir="false" afterPath="$PROJECT_DIR$/report/sections/referenca.tex" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/code/autoencoder/autoencoder.py" beforeDir="false" afterPath="$PROJECT_DIR$/code/autoencoder/autoencoder.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/code/autoencoder/parameter_tuning.py" beforeDir="false" afterPath="$PROJECT_DIR$/code/autoencoder/parameter_tuning.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -179,7 +175,15 @@
       <option name="project" value="LOCAL" />
       <updated>1747429913422</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Finding the best parameters for the Autoencoder">
+      <option name="closed" value="true" />
+      <created>1747483759422</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1747483759422</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -190,6 +194,7 @@
     <MESSAGE value="Added gitignore with latex output files" />
     <MESSAGE value="Added details about outliers in the report" />
     <MESSAGE value="Finished the outliers part" />
-    <option name="LAST_COMMIT_MESSAGE" value="Finished the outliers part" />
+    <MESSAGE value="Finding the best parameters for the Autoencoder" />
+    <option name="LAST_COMMIT_MESSAGE" value="Finding the best parameters for the Autoencoder" />
   </component>
 </project>
\ No newline at end of file
Index: code/autoencoder/parameter_tuning.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\nimport pandas as pd\nfrom itertools import product\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, recall_score\n\nimport keras\nfrom keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense\n\nX_train = pd.read_csv(\"datasets/X_train.csv\")\nX_test = pd.read_csv(\"datasets/X_test.csv\")\ny_train = pd.read_csv(\"datasets/y_train.csv\")\ny_test = pd.read_csv(\"datasets/y_test.csv\")\n\nclass Autoencoder:\n    def __init__(self, encoding_dim, activation1, activation2, optimizer1, optimizer2):\n        self.input_dim = X_train.shape[1]\n        self.encoding_dim = encoding_dim\n\n        # Build the autoencoder model\n        input_layer = keras.layers.Input(shape=(self.input_dim,))\n        encoder = keras.layers.Dense(encoding_dim, activation1)(input_layer)\n        decoder = keras.layers.Dense(self.input_dim, activation2)(encoder)\n\n        self.autoencoder = keras.Model(inputs=input_layer, outputs=decoder)\n        self.encoder_model = keras.Model(inputs=input_layer, outputs=encoder)\n\n        self.autoencoder.compile(optimizer=optimizer1, loss=optimizer2)\n        self.autoencoder.summary()\n\n    def train(self, X_train, X_test, epochs, batch_size=32):\n        self.autoencoder.fit(\n            X_train, X_train,\n            epochs=epochs,\n            batch_size=batch_size,\n            shuffle=True,\n            validation_data=(X_test, X_test)\n        )\n\n    def encode(self, X):\n        return self.encoder_model.predict(X)\n\nae_param_map = {\n    'activation1': ['leaky_relu'],\n    'activation2': ['relu'],\n    'optimizer1': ['adam', 'sgd'],\n    'optimizer2': ['mse', 'binary_crossentropy']\n}\ngb_learning_rates = [0.1, 0.3]\n\nae_keys = list(ae_param_map.keys())\nae_values = list(ae_param_map.values())\nae_combinations = list(product(*ae_values))\n\nresults = []\nfor ae_params_tuple in ae_combinations:\n    ae_params = dict(zip(ae_keys, ae_params_tuple))\n    print(f\"Training Autoencoder with params: {ae_params}\")\n\n    ae = Autoencoder(\n        encoding_dim=4,\n        activation1=ae_params['activation1'],\n        activation2=ae_params['activation2'],\n        optimizer1=ae_params['optimizer1'],\n        optimizer2=ae_params['optimizer2']\n    )\n    ae.train(X_train, X_test, epochs=50)\n    encoded_train = ae.encode(X_train)\n    encoded_test = ae.encode(X_test)\n\n    for lr in gb_learning_rates:\n        print(f\"Training GradientBoosting with learning_rate={lr}\")\n        model = GradientBoostingClassifier(\n            n_estimators=100,\n            learning_rate=lr,\n            random_state=42\n        )\n        model.fit(encoded_train, y_train.values.ravel())\n\n        y_pred = model.predict(encoded_test)\n\n        acc = accuracy_score(y_test, y_pred)\n        rec = recall_score(y_test, y_pred, average='macro')\n\n        print(f\"Accuracy: {acc:.4f}, Recall: {rec:.4f}\\n\")\n\n        results.append({\n            'activation1': ae_params['activation1'],\n            'activation2': ae_params['activation2'],\n            'optimizer1': ae_params['optimizer1'],\n            'optimizer2': ae_params['optimizer2'],\n            'gb_learning_rate': lr,\n            'accuracy': acc,\n            'recall_macro': rec\n        })\n\nresults_df = pd.DataFrame(results)\n\nprint(\"Tuning completed. Summary:\")\nprint(results_df)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/code/autoencoder/parameter_tuning.py b/code/autoencoder/parameter_tuning.py
--- a/code/autoencoder/parameter_tuning.py	(revision 6789131d7e069713819ffe8c7e06f29ea6ac4bb0)
+++ b/code/autoencoder/parameter_tuning.py	(date 1747483790723)
@@ -45,7 +45,7 @@
 
 ae_param_map = {
     'activation1': ['leaky_relu'],
-    'activation2': ['relu'],
+    'activation2': ['relu', 'sigmoid'],
     'optimizer1': ['adam', 'sgd'],
     'optimizer2': ['mse', 'binary_crossentropy']
 }
Index: code/autoencoder/autoencoder.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\nimport pandas as pd\n\nfrom keras import layers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import accuracy_score, classification_report\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense\n\nX_train = pd.read_csv(\"datasets/X_train.csv\")\nX_test = pd.read_csv(\"datasets/X_test.csv\")\ny_train = pd.read_csv(\"datasets/y_train.csv\")\ny_test = pd.read_csv(\"datasets/y_test.csv\")\n\ninput_dim = X_train.shape[1]\nencoding_dim = 2\n\ninput_layer = keras.layers.Input(shape=(input_dim,))\nencoder = keras.layers.Dense(encoding_dim, activation=\"relu\")(input_layer)\ndecoder = keras.layers.Dense(input_dim, activation=\"sigmoid\")(encoder)\nautoencoder = keras.Model(inputs = input_layer, outputs=decoder)\n\nautoencoder.compile(optimizer=\"adam\", loss=\"mse\")\n\nautoencoder.summary()\n\nautoencoder.fit(X_train, X_train, epochs=50, batch_size=32, shuffle=True, validation_data=(X_test, X_test))\nencoder = keras.Model(inputs=autoencoder.input, outputs=autoencoder.layers[1].output)\nencoded_features_train = encoder.predict(X_train)\nencoded_features_test = encoder.predict(X_test)\n\nprint(\"Encoded Features Shape (Train):\", encoded_features_train.shape)\nprint(\"Encoded Features Shape (Test):\", encoded_features_test.shape)\n\n# model = LogisticRegression() # 68%\n# model = RandomForestClassifier(n_estimators=100, random_state=42) 66%\n# model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42) 74%\n# model = SVC(kernel='rbf', probability=True) 69%\n\nmodel.fit(encoded_features_train, y_train)\ny_pred = model.predict(encoded_features_test)\n# accuracy = accuracy_score(y_test, y_pred)\nprint(classification_report(y_test, y_pred))\n# print(f\"Accuracy with selected features: {accuracy}\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/code/autoencoder/autoencoder.py b/code/autoencoder/autoencoder.py
--- a/code/autoencoder/autoencoder.py	(revision 6789131d7e069713819ffe8c7e06f29ea6ac4bb0)
+++ b/code/autoencoder/autoencoder.py	(date 1747484042186)
@@ -1,14 +1,11 @@
 import numpy as np
 import pandas as pd
 
-from keras import layers
-from sklearn.linear_model import LogisticRegression
-from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
-from sklearn.svm import SVC
-
-from sklearn.metrics import accuracy_score, classification_report
+from sklearn.ensemble import GradientBoostingClassifier
+from sklearn.metrics import classification_report
 
 import keras
+from keras import layers
 from keras.models import Sequential
 from keras.layers import Input, Dense
 
@@ -17,33 +14,52 @@
 y_train = pd.read_csv("datasets/y_train.csv")
 y_test = pd.read_csv("datasets/y_test.csv")
 
-input_dim = X_train.shape[1]
-encoding_dim = 2
+class Autoencoder:
+    def __init__(self, encoding_dim, activation1, activation2, optimizer1, optimizer2):
+        self.input_dim = X_train.shape[1]
+        self.encoding_dim = encoding_dim
+
+        input_layer = keras.layers.Input(shape=(self.input_dim,))
+        encoder = keras.layers.Dense(encoding_dim, activation1)(input_layer)
+        decoder = keras.layers.Dense(self.input_dim, activation2)(encoder)
 
-input_layer = keras.layers.Input(shape=(input_dim,))
-encoder = keras.layers.Dense(encoding_dim, activation="relu")(input_layer)
-decoder = keras.layers.Dense(input_dim, activation="sigmoid")(encoder)
-autoencoder = keras.Model(inputs = input_layer, outputs=decoder)
+        self.autoencoder = keras.Model(inputs=input_layer, outputs=decoder)
+        self.encoder_model = keras.Model(inputs=input_layer, outputs=encoder)
 
-autoencoder.compile(optimizer="adam", loss="mse")
+        self.autoencoder.compile(optimizer=optimizer1, loss=optimizer2)
+        self.autoencoder.summary()
 
-autoencoder.summary()
+    def train(self, X_train, X_test, epochs, batch_size=32):
+        self.autoencoder.fit(
+            X_train, X_train,
+            epochs=epochs,
+            batch_size=batch_size,
+            shuffle=True,
+            validation_data=(X_test, X_test)
+        )
 
-autoencoder.fit(X_train, X_train, epochs=50, batch_size=32, shuffle=True, validation_data=(X_test, X_test))
-encoder = keras.Model(inputs=autoencoder.input, outputs=autoencoder.layers[1].output)
-encoded_features_train = encoder.predict(X_train)
-encoded_features_test = encoder.predict(X_test)
+    def encode(self, X):
+        return self.encoder_model.predict(X)
 
-print("Encoded Features Shape (Train):", encoded_features_train.shape)
-print("Encoded Features Shape (Test):", encoded_features_test.shape)
+ae = Autoencoder(
+        encoding_dim=4,
+        activation1='leaky_relu',
+        activation2='sigmoid',
+        optimizer1='adam',
+        optimizer2='mse'
+    )
 
-# model = LogisticRegression() # 68%
-# model = RandomForestClassifier(n_estimators=100, random_state=42) 66%
-# model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42) 74%
-# model = SVC(kernel='rbf', probability=True) 69%
+ae.train(X_train, X_test, epochs=50)
+encoded_train = ae.encode(X_train)
+encoded_test = ae.encode(X_test)
 
-model.fit(encoded_features_train, y_train)
-y_pred = model.predict(encoded_features_test)
-# accuracy = accuracy_score(y_test, y_pred)
-print(classification_report(y_test, y_pred))
-# print(f"Accuracy with selected features: {accuracy}")
\ No newline at end of file
+model = GradientBoostingClassifier(
+            n_estimators=100,
+            learning_rate=0.3,
+            random_state=42
+        )
+
+model.fit(encoded_train, y_train.values.ravel())
+y_pred = model.predict(encoded_test)
+
+report = classification_report(y_test, y_pred)
\ No newline at end of file
